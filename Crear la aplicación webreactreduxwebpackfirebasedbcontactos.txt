
Abra un cmd y posicionese en la carpeta donde tendra el codigo del aplicativo, y ejecute el siguiente comando:
	
	create-react-app webreactreduxwebpackfirebasedbcontactos

Crear el package.json con lo basico, vaya a la carpeta del proyecto webreactreduxwebpackfirebasedbcontactos y ejecutar el siguiente comando:

	npm init -y

Comandos para la configuración de la aplicación

	yarn add react react-dom react-router react-router-dom bootstrap reactstrap react-bootstrap redux react-redux redux-devtools-extension redux-thunk react-fetch react-confirm-alert react-md-spinner @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome @fortawesome/free-brands-svg-icons
	
	npm install path @babel/core @babel/preset-react babel-loader --save

Instalar el web pack globalmente con el siguiente comando:

	npm install webpack webpack-cli --global

Instalar componentes de webpack localmente con el siguiente comando:

	npm install -D webpack webpack-cli

	Nota: Tambien puede ejecutar el webpack cli de manera global con el comando npm i -g webpack-cli

Instalar el componente que nos pasara el index html por default a la carpeta dist ejecute el siguiente comando:

	npm install html-webpack-plugin

Facilitar la compilación y generación del proyecto, hay que instalar un servidor de desarrollo ejecutando el siguiente comando:

	npm install webpack-dev-server

Crear el archivo de configuración que webpack utilizara para crear todos los componentes ejecutando el siguiente comando en la raiz del proyecto:

	fsutil file createnew webpack.config.js 0

El archivo webpack.config.js contiene las siguientes cosas:

	mode: Webpack optimizara nuestro bundle segun el modo que utilicemos
	entry: Dirección a nuestro archivo de entrada
	output: Webpack generara un archivo de salida, donde tendremos todo lo que llegue a procesar webpack

Ejecute el siguiente comando para usar el archivo webpack.config.js como configuración:

	webpack webpack.config.js

Agregue dentro del archivo webpack.config.js lo siguiente:
	
      var htmlWebpackPlugin = require('html-webpack-plugin');
      var path = require('path');
      module.exports = {
       devServer: {
           contentBase: path.join(__dirname, 'dist'),
           compress: true,
           port: 3000
         },
       entry:{
           main: './src/index.js'
       } ,
       output: {
         path: path.join(__dirname, 'dist'),
         filename: '[name].js'
       },
       resolve: {
           extensions: ['.js', '.jsx', '.css', '.scv']
         },
       module: {
         rules: [
           {
             test: /\.js$/,
             exclude: /node_modules/,
             use: {
               loader: 'babel-loader',
               options: {
                 presets: ['@babel/preset-react']
               }
             }
           },
           {
               test: /\.css$/i,
               use: ['style-loader', 'css-loader'],
           },
           {
               test: /\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i,
               loader: 'url-loader',
               options: {
                 limit: 8192,
               },
           },
         ]
       },
       plugins:[
           new htmlWebpackPlugin(
               {
                   template: './src/index.html'
               }
           )
       ]
      }

Crear la carpeta src y dentro realizar las siguientes acciones:

	Crear archivo index.html
	Crear archivo index.js

Agregue lo siguiente al archivo index.html:

      <!DOCTYPE html>
      <html lang="en" dir="ltr">
         <head>
            <meta charset="utf-8">
            <title>Aplicación de Contactos</title>
        </head>
        <body>
           <div id="root">
           </div>
           <script src="dist/main.js" charset="utf-8"></script>
        </body>
      </html>
	
Abra el archivo package.json y agregue dentro de la sección scripts lo siguiente:

	"start": "webpack-dev-server --mode development",
	"build": "webpack --mode production"

Integrar los cambios que se vayan haciendo al archivo main.js:

	npx webpack -d

Compilar e integrar los cambios que se hayan hecho ejecute el siguiente comando:

	npx webpack-dev-server -d

	Nota: Se recomienda que una vez instalado el servidor de desarrollo se ejecute este comando en lugar de npx webpack -d ya que permitira que se trabaje
	más rapido

Añadir carpeta node_modules a repositorio de github, siga las siguientes instrucciones:

	Abra el archivo .gitignore y quite la línea de código /node_modules

	Nota: Se recomienta que no la quite ya que ocupara muchos megas en el repositorio y además se pueden descargar todas las librerías ejecutando el 
	comando npm install sobre la carpeta de la aplicación, ya que todas las dependencias estan declaradas en el archivo package.json

	
Registrar App.	

Realiza los siguientes pasos para agregar Firebase al Proyecto.

	* Ingresa a Firebase https://firebase.google.com/ y dar clic en ir a la consola
	* Dar clic en la Base de datos que creo y luego dar clic en el icono web de la sección Comienza por agregar Firebase
	* Escriba el sobrenombre de la App, ejemplo contactosreactredux
	* Dar un clic en la opción configura Firebase Hosting  para esta app
	* Seleccione del combo Crear un sitio web
	* Escriba el nombre del sitio web, ejemplo contactosreactredux y pulse en el botón Registrar App

Agregar el SDK de Firebase.

Realiza los siguientes pasos para configurar firebase en tu App:

	* Copia y pege estas secuencias de comandos en la parte inferior de la etiqueta <body> antes de usar cualquier servicio de Firebase.

	<!-- The core Firebase JS SDK is always required and must be listed first -->
	<script src="/__/firebase/7.5.2/firebase-app.js"></script>

	<!-- TODO: Add SDKs for Firebase products that you want to use https://firebase.google.com/docs/web/setup#available-libraries -->
	<script src="/__/firebase/7.5.2/firebase-analytics.js"></script>

	<!-- Initialize Firebase -->
	<script src="/__/firebase/init.js"></script>
	
	Nota: No es necesario si en el archivo index.js importa las referencia import * as firebase from "firebase/app";

Instale el Firebase CLI	ejecutando el comando:

	npm install -g firebase-tools

Implementa el sitio en Firebase Hosting.

Ir al directorio raíz de la app web y ejecute el siguiente comando para conectarse a firebase google:

	firebase login

Ejecute el siguiente comando para añadir los complementos de firebase:

	firebase init

Seleccione con barra espaciadora las siguientes opciones y descienda con la tecla flecha hacía abajo:

	 (*) Database: Deploy Firebase Realtime Database Rules
	 ( ) Firestore: Deploy rules and create indexes for Firestore
	 ( ) Functions: Configure and deploy Cloud Functions
	 (*) Hosting: Configure and deploy Firebase Hosting sites
	 ( ) Storage: Deploy Cloud Storage security rules
	 ( ) Emulators: Set up local emulators for Firebase features  

Dar enter en la opción use an existing project.

Seleccione el proyecto que creo en firebase.

Dar enter sobre cada una de las siguientes opciones:

	? What file should be used for Database Rules? database.rules.json
	? What do you want to use as your public directory? public
	? Configure as a single-page app (rewrite all urls to /index.html)? Yes

Especifica tu sitio en el archivo firebase.json:

Agrega el nombre de tu sitio al archivo de configuración firebase.json. Después de realizar la configuración, consulta las recomendaciones para la implementación de varios sitios.

	{
  	"hosting": {
	    "site": "contactosreactredux",
	    "public": "dist",
	    "ignore": [
	      "firebase.json",
	      "**/.*",
	      "**/node_modules/**"
	    ],
	    "rewrites": [
	      {
        	"source": "**",
	        "destination": "/index.html"
	      }
	    ]
	  }
	}


Copia el archivo index.html que se genero en la carpeta public y pegalo dentro de la carpeta src.

Ejecute los siguientes comando para instalar los componentes de Firebase que nos permitiran hacer peticiones y transacciones a la BD de firebase:

	npm install firebase react-redux-firebase redux-firestore@latest --save 

Ubica los archivos estáticos ejemplo HTML, CSS y JS en el directorio de implementación de tu app (el directorio predeterminado es “public”, pero cambialo por src) y 
luego ejecuta este comando desde el directorio raíz de la app:

	firebase deploy --only hosting:contactosreactredux